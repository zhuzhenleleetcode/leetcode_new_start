/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public Comparator<ListNode> listComparator = new Comparator<ListNode>(){
        public int compare(ListNode l1, ListNode l2){
            return l1.val-l2.val;
        }
    };
    public ListNode mergeKLists(ListNode[] lists) {
        int k = lists.length;
        ListNode dummy = new ListNode(0);
        PriorityQueue<ListNode> heap = new PriorityQueue<ListNode>(listComparator);
        for(int i=0; i<k; i++){
            if(lists[i]!=null)heap.offer(lists[i]);
        }
        ListNode head = dummy;
        while(!heap.isEmpty()){
            ListNode cur=heap.poll();
            head.next=cur;
            head=head.next;
            if(cur.next!=null)heap.offer(cur.next);
        }
        return dummy.next;
    }
}




/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        return mergeKListsHelper(lists, 0, lists.length-1);
    }
    public ListNode merge(ListNode l1, ListNode l2){
        ListNode dummy = new ListNode(0);
        ListNode node = dummy;
        while(l1!=null&&l2!=null){
            if(l1.val<l2.val){
                node.next=l1;
                l1=l1.next;
            }else{
                node.next=l2;
                l2=l2.next;
            }
            node=node.next;
        }
        node.next=l1!=null?l1:l2;
        return dummy.next;
    }
    public ListNode mergeKListsHelper(ListNode[] lists, int start, int end){
        if(start>end)return null;
        if(start==end) return lists[start];
        int mid = start+(end-start)/2;
        ListNode left = mergeKListsHelper(lists, start, mid);
        ListNode right = mergeKListsHelper(lists, mid+1, end);
        return merge(left, right);
    }
}
