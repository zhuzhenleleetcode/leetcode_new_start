/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        if(head==null)return null;
        ListNode dummy=new ListNode(0);
        dummy.next=head;
        ListNode fast=dummy;
        ListNode slow=dummy;
        while(fast.next!=null&&fast.next.next!=null){
            fast=fast.next.next;
            slow=slow.next;
        }
        ListNode rootNode =slow.next;
        TreeNode root=new TreeNode(rootNode.val);
        slow.next=null;
        root.left=sortedListToBST(dummy.next);
        root.right=sortedListToBST(rootNode.next);
        return root;
    }
}


class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        ListNode dummy = new ListNode(0);
        dummy.next=head;
        head=dummy;
        int size=0;
        while(head.next!=null){
            size++;
            head=head.next;
        }
        return sortedListToBST(dummy.next, size);
    }
    public TreeNode sortedListToBST(ListNode head, int size){
        if(size<=0)return null;
        int mid=(size+1)/2;
        ListNode midNode =head;
        for(int i=1;i<mid;i++){
            midNode=midNode.next;
        }
        TreeNode root = new TreeNode(midNode.val);
        root.left=sortedListToBST(head, mid-1);
        root.right=sortedListToBST(midNode.next, size-mid);
        return root;
    }
}
