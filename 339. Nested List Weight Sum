/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class Solution {
    public int depthSum(List<NestedInteger> nestedList) {
        return depthSum(nestedList, 1);
    }
    public int depthSum(List<NestedInteger> nestedList, int level){
        int res=0;
        if(nestedList==null) return res;
        for(int i=0; i<nestedList.size(); i++){
            NestedInteger cur = nestedList.get(i);
            if(cur.isInteger()){
                res+=cur.getInteger()*level;
            }else{
                List<NestedInteger> list = cur.getList();
                res+=depthSum(list, level+1);
            }
        }
        return res;
    }
}
